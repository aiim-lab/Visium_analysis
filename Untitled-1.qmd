
# library ----------------------------------------------------------------
```{r}
library(Seurat)
library(ggplot2)
library(patchwork)
library(dplyr)
library(semla)
library(viridis)
```

```{r}
data_root_directory <- file.path("data/raw", "*")

samples <- Sys.glob(paths = file.path(data_root_directory, 
                                      "filtered_feature_bc_matrix.h5"))

imgs <- Sys.glob(paths = file.path(data_root_directory, 
                                   "spatial", "tissue_lowres_image.png"))

spotfiles <- Sys.glob(paths = file.path(data_root_directory, 
                                        "spatial", "tissue_positions.csv"))

json <- Sys.glob(paths = file.path(data_root_directory, 
                                   "spatial", "scalefactors_json.json"))

infoTable <- tibble(samples, imgs, spotfiles, json, # Add required columns
                    sample_id = c("myo", "ctl")) # Add additional column

se <- ReadVisiumData(infoTable)
saveRDS(se, file = "data/results/se_before_QC.rds")

se <- readRDS(file = "data/results/se_before_QC.rds")
```


```{r}
se <- LoadImages(se)
ImagePlot(se)
```


```{r}
# Plot with semla
MapFeatures(se, features = "nFeature_Spatial", 
            image_use = "raw",
            override_plot_dims = TRUE,
            pt_size = 1.5,
            colors = RColorBrewer::brewer.pal(n = 9, name = "Spectral")) + 
                ThemeLegendRight()

p <- MapFeaturesSummary(se, 
                        features = "nFeature_Spatial", 
                        subplot_type = "violin",
                        colors = cols)
# Visualize QC metrics as a violin plot
plot1 <- VlnPlot(se, features = "nCount_Spatial", pt.size = 0.1, log = TRUE) + NoLegend()
plot2 <- SpatialFeaturePlot(se, features = "nCount_Spatial") + theme(legend.position = "right")
wrap_plots(plot1, plot2)

cols <- viridis::rocket(11, direction = -1)

# Plot with Seurat
MapFeatures(se, slot = "counts",
                 features = "VIM", 
                 colors = cols)
p
```


```{r}
MapFeaturesSummary(se, features = "nFeature_Spatial", subplot_type = "histogram")
# Filter by number of unique genes
se <- SubsetSTData(se, expression = nFeature_Spatial > 40)
se
MapFeaturesSummary(se[,se@meta.data$sample_id=="myo"], features = "nFeature_Spatial", subplot_type = "histogram")

tt <- SubsetSTData(se, expression = sample_id == "ctl", spots = NULL, features = NULL, idents = NULL)
```


```{r}
se1 <- se |> 
  NormalizeData() |>
  ScaleData() |> 
  FindVariableFeatures() |> 
  RunPCA()
```



```{r}
MapFeatures(se1, 
            features = "PC_4", 
            center_zero = TRUE, 
            section_number = 1, 
            pt_size = 2,
            colors = RColorBrewer::brewer.pal(n = 11, name = "RdBu") |> rev())
```


```{r}
se1 <- FindNeighbors(se1, reduction = "pca", dims = 1:30)
se1 <- FindClusters(se1, verbose = FALSE)
se1 <- RunUMAP(se1, reduction = "pca", dims = 1:30)
```



```{r}
p1 <- DimPlot(se1, reduction = "umap", label = TRUE, split.by = "sample_id")
p2 <- SpatialDimPlot(se1, label = TRUE, label.size = 3)
p1 + p2
```

```{r}

```


```{r}
se <- LoadImages(se, verbose = FALSE)

MapLabels(se1, 
          column_name = "seurat_clusters", 
          image_use = "raw", 
          override_plot_dims = TRUE) +
  plot_layout(guides = "collect") &
  guides(fill = guide_legend(override.aes = list(size = 3), 
                             ncol = 2)) &
  theme(legend.position = "right")
```


```{r}
se2 <- se1

# Normalize ADT data,
DefaultAssay(se2) <- "AbCapture"
se2 <- NormalizeData(se2, normalization.method = "CLR", margin = 2)
DefaultAssay(cbmc) <- "RNA"

# Note that the following command is an alternative but returns the same result
s2 <- NormalizeData(se2, normalization.method = "CLR", margin = 2, assay = "AbCapture")

# Now, we will visualize CD14 levels for RNA and protein By setting the default assay, we can
# visualize one or the other
DefaultAssay(cbmc) <- "ADT"
p1 <- FeaturePlot(cbmc, "CD19", cols = c("lightgrey", "darkgreen")) + ggtitle("CD19 protein")
DefaultAssay(cbmc) <- "RNA"
p2 <- FeaturePlot(cbmc, "CD19") + ggtitle("CD19 RNA")

# place plots side-by-side
p1 | p2
```


```{r}
# Now, we can include the key in the feature name, which overrides the default assay
p1 <- FeaturePlot(se2, "spatial_CD14", cols = c("lightgrey", "darkgreen")) + ggtitle("CD68 RNA")
p2 <- FeaturePlot(se2, "abcapture_CD14.1") + ggtitle("CD68 protein")
p1 | p2
```


```{r}
# find markers for every cluster compared to all remaining cells, report only the positive
# ones
pbmc.markers <- FindAllMarkers(se2, only.pos = TRUE)
pbmc.markers %>%
    group_by(cluster) %>%
    dplyr::filter(avg_log2FC > 1)

pbmc.markers %>%
    group_by(cluster) %>%
    dplyr::filter(avg_log2FC > 1) %>%
    slice_head(n = 100) %>%
    ungroup() -> top100
DoHeatmap(se2, features = top100$gene) + NoLegend()
```